/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package di;

import com.google.common.collect.Lists;
import di.container.BeanDescription;
import di.container.BeanFactory;
import di.container.BeanLifecycle;
import di.container.beanproperty.BeanProperty;
import di.container.beanproperty.BeanPropertyWithId;
import di.container.beanproperty.BeanPropertyWithValue;
import di.container.DIContainer;
import di.container.DIContainerException;
import di.container.JsonDIContainer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import org.junit.Test;
import static org.junit.Assert.*;

public class BeanGenerationTest {
    @Test public void basicPrototypeTest() {
        String value = "TestString";

        BeanProperty stringArg = new BeanPropertyWithValue("attribute", value, String.class);

        BeanDescription prototype = new BeanDescription(BeanLifecycle.PROTOTYPE, SimpleClass.class,
            false, Lists.asList(stringArg, new BeanProperty[0]), new ArrayList<>());


        Map<String, BeanDescription> map = new HashMap<>();
        map.put("prototype", prototype);
        BeanFactory beanFactory = new BeanFactory();
        beanFactory.setBeans(map);
        DIContainer container = new JsonDIContainer(beanFactory);

        try {
            SimpleClass bean1 = container.getBean("prototype", SimpleClass.class);
            assertEquals(value, bean1.getAttribute());

            SimpleClass bean2 = container.getBean("prototype", SimpleClass.class);
            assertNotEquals(bean1, bean2);
        } catch (DIContainerException e) {
            e.printStackTrace();
            fail();
        }
    }

    @Test public void basicSingletonTest() {
        String value = "TestString";
        int number = 5150;

        BeanProperty stringArg = new BeanPropertyWithValue("attribute", value, String.class);
        BeanProperty intArg = new BeanPropertyWithValue("number", number, int.class);
        BeanDescription singleton = new BeanDescription(BeanLifecycle.SINGLETON, SimpleClass.class, false,
            Lists.newArrayList(stringArg), Lists.newArrayList(intArg));

        Map<String, BeanDescription> map = new HashMap<>();
        map.put("singleton", singleton);
        BeanFactory beanFactory = new BeanFactory();
        beanFactory.setBeans(map);
        DIContainer container = new JsonDIContainer(beanFactory);

        try {
            SimpleClass bean1 = container.getBean("singleton", SimpleClass.class);
            assertEquals(value, bean1.getAttribute());
            assertEquals(number, bean1.getNumber());

            SimpleClass bean2 = container.getBean("singleton", SimpleClass.class);
            assertEquals(bean1, bean2);
        } catch (DIContainerException e) {
            e.printStackTrace();
            fail();
        }
    }

    @Test public void complexSingletonTest() {
        String value = "TestString";

        BeanProperty stringArg = new BeanPropertyWithValue("attribute", value, String.class);

        BeanDescription field = new BeanDescription(BeanLifecycle.SINGLETON, SimpleClass.class, false,
            Lists.newArrayList(stringArg), new ArrayList<>());

        Map<String, BeanDescription> map = new HashMap<>();
        map.put("singleton", field);

        BeanFactory beanFactory = new BeanFactory();


        BeanProperty complexSingletonConstructorProperty = new BeanPropertyWithId(beanFactory, "singleton");
        BeanDescription complexSingleton = new BeanDescription(BeanLifecycle.SINGLETON, ComplexClass.class,
            false, Lists.newArrayList(complexSingletonConstructorProperty), new ArrayList<>());

        map.put("complexSingleton", complexSingleton);

        beanFactory.setBeans(map);

        DIContainer container = new JsonDIContainer(beanFactory);

        try {
            ComplexClass bean = container.getBean("complexSingleton", ComplexClass.class);
            assertEquals(value, bean.getField().getAttribute());
        } catch (DIContainerException e) {
            e.printStackTrace();
            fail();
        }
    }
}
